python 面向对象编程
基础
继承
组合，mixin

魔法函数
    - 魔法函数概述
    - 构造魔法函数
    - 运算类魔法函数

# 1 面向对象概述
- oop 思想
    - 接触到任意一个任务，首先想到的是任务这个世界的构成，是由模型构成的
- 几个名词
    - OO:面向对象
    - OOA:面向对象的分析
    - OOD: 面向对象的设计
    - OOI: XXX的实现
    - OOP: XXX的编程
    - OOA -> OOD ->OOI:面向对象的实现过程
    类和对象的概念
    - 类：抽象名词，代表一个集合，共性的事物
    -对象：具象的事物，单个个体
    - 类与对象的关系
     - 一个具象，代表一类事物的某一个个体
     - 一个抽象，代表的是一大类事物
 - 类中的内容 ， 应该具有两个内容
    - 表明事物的特征 ，叫做属性（变量）
    表明事物的功能和动作，称为成员方法（函数）
 # 2 .类的基本实现
    - 类的命名
        - 遵守变量命名规则
        - 大驼峰
        - 尽量避开跟系统命名相似的命名
    - 如何声明一个类
        - 必须使用class关键字
        - 类由属性和方法构成，其他不允许出现
        - 成员属性定义可以直接使用变量赋值，如果没有值，可使用None

--实例化类
            变量 = 类名（）#实例化一个对象
-- 访问对象成员
    - 使用点操作符
            obj.成员属性名称
            obj.成员方法
    - 可以通过默认内置变量检查类和对象所有成员
        - 对象成员检查
            # dict前后各有两个下划线
            obj.__dict__
        - 类所有的成员
                # dict 前后各有两个下划线
                class_name.__dict__


# anaconda基本使用
- anaconda主要是一个虚拟环境管理器
- 还是一个安装包管理器
- conda list：显示anaconda安装包
- conda env list：显示anaconda的虚拟环境列表
- conda create -n xxx python=3.6 : 创建python版本为3.6的虚拟环境，名称为xxx

# 类和对象的成员分析
 - 类和对象都可以存储成员，成员可以归类所有，也可以归对象所有
 - 类存储成员时使用的是与类关联的一个对象
 - 独享存储成员是存储在当前对象中
 - 对象访问一个成员时，如果对象中没有成员，尝试访问类中同名成员
           如果对象中有此成员，一定使用对象中成员
 - 创建对象的时候，类的成员不会放入对象中，而是得到一个空对象，成员
 - 通过对象对类中成员重新赋值或者通过对象添加成员时，对应成员会保存在对象中，而不会修改类成员
 # 关于self
 - self在对象方法中表示当前对象本身，如果通过对象调用一个方法，那么该对象会自动传入当前方法中的第一个参数中
 - self 并不是关键字，只是一个用于接受对象的普通参数，理论上可以用任何一个普通变量名代替
 - 方法中有self形参的方法成为非绑定类的方法，可以通过对象访问，没有self的是
 绑定类的方法，只能通过类访问
 - 实用类访问绑定类的方法时，如果方法中需要访问当前类的成员，可以通过__class__成员名来

# 面向对象三大特性
 - 封装
 - 继承
 - 多态

  ##封装
  - 封装就是对对象的成员进行访问控制
  - 封装的三个级别：
        - 公开的 public
        - 受保护的 protected
        - 私有的 private
        - public protected private不是关键字
  - 判别对象位置
        - 对象内部
        - 对象外部
        - 子类中
  - 私有
        - 私有成员是最高级别的封装，只能在当前类或对象中访问
        - 在成员前面加两个下划线即可：
           class Person():
           # name是公有成员
           name =  "lll"
           # __age私有成员
           __age = 22
           python的私有不是真的私有，是一种成为name mangling的改名策略
           可以使用对象._classname_attributename访问
        - 受保护的封装protected
            - 受保护的封装是将对象成员进行一定级别的封装，然后，再类中
              或者子类中都可以进行访问，但是在外部不可以
              - 封装方法： 在成员名称前面添加一个下划线即可

        - 公开的 公共的 public
            ·公共的封装实际对成员没有任何操作，任何地方都可以访问
   ## 继承
   - 子类可以获得父类的成员属性和方法
   - 作用： 减少代码，增加代码复用功能，同时可以设置类与类之间的关系
   - 继承与被继承的概念：
            被继承的类叫父类，也叫基类 ，超类
            用于继承的类 叫子类，也叫派生类
            继承与被继承一定存在一个 is-a关系
      # 继承的语法
# 在python中 任何类都有一个共同的父类叫object
class Person():
    name = " name"
    age = 0
    def sleep (self):
        print("Sleeping")
class Teacher(Person):
    pass
t = Teacher()
print(t.name)
print(Teacher.name)

继承特征：
    所有的类都继承自object类，即所有的类都是object类的子类
    - 子类一旦继承父类后并没有将父类成员完全赋值到子类中，而是通过引用关系访问调用
    - 子类中可以定义独有的成员方法和属性
    - 子类中定义的成员和父类成员如果相同，则优先使用子类成员
    - 子类如果想扩充父类方法，可以在定义新方法的同时访问父类成员来进行代码重用
    可以使用  父类名.父类成员 的格式来调用父类成员，也可以使用super().父类
    成员的格式来调用
  继承变量函数的查找顺序问题
    - 优先查找自己的变量
    - 没有就查找父类
    - 构造函数如果本类中没有定义，则自动查找父类构造函数
    - 如果本类中有定义 ，则不继续向上查找
 —— 构造函数
    - 是一类特殊函数，在类进行实例化之前进行调用
    - 如果定义了构造函数，则实例化使用构造函数，不查找父类构造函数
    - 如果没定义，则自动查抄父类构造函数
    - 如果子类没定义，父类构造函数带参数，则构造对象的参数应该按父类参数构造
--Super
    -- super 不是关键字，而是一个类
    -- super的作用获取MRO列表中的第一个类
    -- suoer与父类没任何实质性关系，但通过super能调用到父类
    -super的两个使用方法  1、构造函数中父类的调用